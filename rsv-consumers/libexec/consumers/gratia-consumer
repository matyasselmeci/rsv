#!/usr/bin/env python

""" This script processes records and uploads them to the Gratia collector """

import os
import re
import sys

import RSVConsumer


class GratiaConsumer(RSVConsumer.RSVConsumer):
    name = 'gratia'


    def validate_failed_records_dir(self):

        # Where records will be moved if they fail
        # This script will move files to this directory that fail, so it needs write access.
        # It won't read anything from the directory, but there's probably a problem if it can't.
        self.failed_records_dir = os.path.join("/", "var", "spool", "rsv", "failed-gratia-records")
        if not os.access(self.failed_records_dir, os.F_OK):
            self.log("Directory for failed gratia scripts does not exist at %s.  Creating it." %
                self.failed_records_dir,)
            try:
                os.mkdir(self.failed_records_dir, 0755)
            except OSError, err:
                self.die("ERROR: Could not create directory.  Error: %s" % err)
        if not os.access(self.failed_records_dir, os.R_OK):
            self.die("ERROR: Cannot read failed records directory '%s'" % self.failed_records_dir)
        if not os.access(self.failed_records_dir, os.W_OK):
            self.die("ERROR: Cannot write failed records directory '%s'" % self.failed_records_dir)

        return
    

    def initialize_gratia(self):
        """ Try importing the Gratia libraries.  They might not be on the system so we treat
        them more carefully than other libraries that we import """

        try:
            import gratia.common.Gratia as Gratia
            self.Gratia = Gratia
            import gratia.metric.Metric as Metric
            self.Metric = Metric
        except ImportError, err:
            msg = "ERROR: Could not import Gratia python libraries: %s\n" % err
            msg += "Contents of sys.path:\n"
            msg += "\n".join(sys.path)
            self.die(msg)

        self.__gratia_config_file = os.path.join("/", "etc", "gratia", "metric", "ProbeConfig")
        self.Gratia.Initialize(self.__gratia_config_file)

        return


    def process_record(self, raw_record):
        """ Process a record in WLCG format """
        record = self.parse_record(raw_record)

        # This code is based on the Python scripts RSV generates
        rec = self.Metric.MetricRecord()
        rec.MetricName(record["metricName"])
        rec.MetricType(record["metricType"])
        rec.MetricStatus(record["metricStatus"])
        rec.Timestamp(record["timestamp"])
        rec.ServiceType(record["serviceType"])
        rec.SummaryData(record["summaryData"])
        rec.DetailsData(record["detailsData"].replace("|", "&#124;"))

        # serviceURI and gatheredAt will be on "non-local" metrics
        if "serviceURI" in record and "gatheredAt" in record:
            rec.ServiceUri(record["serviceURI"])
            rec.GatheredAt(record["gatheredAt"])
        # And hostName will be in "local" metrics
        elif "hostName" in record:
            rec.HostName(record["hostName"])

        # Gratia.Send will return an empty string on success, or a string containing
        # the problem on error.
        error_msg = self.Gratia.Send(rec)
        if error_msg and not re.match("OK", error_msg):
            raise RSVConsumer.GratiaException("Failed to send via Gratia: %s" % error_msg)

        return


consumer = GratiaConsumer()
consumer.validate_failed_records_dir()
consumer.initialize_gratia()
consumer.process_files(failed_records_dir=consumer.failed_records_dir)
sys.exit(0)
