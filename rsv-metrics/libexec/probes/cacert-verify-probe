#!/usr/bin/python
# First version Sep 2011, Marco Mambelli marco@hep.uchicago.edu
"""Probe verifying the CA certificates.
"""

import os
import time
import calendar
import hashlib

# Add the current directory to the path:
# auxiliary files are staged in the same directory during remote execution
import sys
sys.path.insert(0, ".")

import rsvprobe
from rsvprobe import shellquote_tuple

# Unix commands used
CMD_OPENSSL = "/usr/bin/openssl"

# Auxiliary functions
def hashfile(hasher, fname):
  """Return the hasher checksum of the file."""
  BLOCKSIZE = 4096 * 1024
  f = open(fname,'r')
  checksum = hasher()
  while True:
    data = f.read(BLOCKSIZE)
    if not data:
      break
    checksum.update(data)
  f.close()
  return checksum.hexdigest().lower()

def md5sum(fname):
  """Return the md5 checksum of the file."""
  return hashfile(hashlib.md5, fname)

def sha256sum(fname):
  """Return the sha256 checksum of the file."""
  return hashfile(hashlib.sha256, fname)

class CAcertProbe(rsvprobe.RSVProbe):
  """Probe verifying the CA certificates. It runs the same tests as the old perl probe:
- Compare the CA certs with the list of CA and sha256 checksums at GOC
- flag a warning if the sha256 checksum differs from the one in the list
- flag a warning is one of the IGTF CA is missing (flag --type EGEE)
- warnings become critical errors after some hours (option --error-hours 72 as default)
Certificates not included in the GOC list are not verified.
Expiration date and validity are not checked.
"""

  def __init__(self):
    rsvprobe.RSVProbe.__init__(self)
    self.metric = ""
    metric = rsvprobe.RSVMetric("OSG-CE", "org.osg.certificates.cacert-expiry", rsvprobe.RSVMetric.STATUS)
    metric.service_version = ">= OSG CE 1.0.0"
    metric.probe_type = "OSG-CE"
    metric.probe_revision = "4.0"
    ## Unix cron type metric interval
    metric.cron_interval = "15 */6 * * *"
    self.supported_metrics = [metric]
    ## Specific options and defaults
    self.ca_certs_dir = None
    # default Error after 192 Hrs
    self.errorHrs = 8*24 
    self.tempdir = rsvprobe.get_temp_dir()
    self.error_file = os.path.join(self.tempdir, "localhost.cacert_verify.err")
    self.test_type = 'osg'
    self.help_message = """IMPORTANT NOTE: This is a probe that verifies if the CA distribution at the site is upto date
This probe downloads a file contains a list of sha256sum from a central location.
This list is compared against the sha256sum of the files in the site CA install.
Additionally it makes sure that all IGTF CAs are installed.
"""
    self.addopt("", "error-file=", "--error-file FILE_LOCATION \tLocation where errors should be recorded")
    self.addopt("", "error-hours=", "--error-hours HOURS \t Number of hours elapsed before error is to be issued")
    self.addopt("", "type=", "--type TYPE \tThis parameter determines whether the test should confrom to EGEE or OSG requirement.\n                                   (Accepted values: osg, egee) (Default: osg)")
    self.addopt("", "cacerts-dir=", "--cacerts-dir DIR \tLocation of CA certificate files")
    ## unused_options from old perl probe
    # " [--worker-script-file <file>     Worker script file to use.".
    # " [--local-ce]          The verify test is run on localhost and not through globus gatekeeper."
 
  def parseopt(self):
    """parse options specific to CAcertProbe and return options, optlist and reminder to allow further processing"""
    options, optlist, remainder = rsvprobe.RSVProbe.parseopt(self)
    for opt, arg in options:
      if opt == '--error-file':
        self.error_file = arg
      elif opt == '--error-hours':
        try:
          self.errorHrs = int(arg)
        except ValueError:
          self.return_unknown("Invalid error hours '%s', must be int. Aborting probe." % arg)      
      elif opt == '--type':
        if not arg in ['osg', 'egee']:
          self.return_unknown("Invalid test type %s, must be 'osg' or 'egee'. Aborting probe." % arg)      
        self.test_type = arg
      elif opt == '--cacerts-dir':
        self.ca_certs_dir = arg
      #
      if not '--error-file' in optlist:
        self.error_file = os.path.join(self.tempdir, "%s.cacert_verify.err" % self.host)
      if self.host == self.localhost:
        self.is_local = True
      else:
        self.is_local = False 

    return options, optlist, remainder

  def run(self):
    """Probe actions"""
    self.parseopt()
    if self.ca_certs_dir:
      certdir = self.ca_certs_dir
    else:
      certdir = rsvprobe.get_ca_dir()
    self.Check_Local_CA(certdir, self.errorHrs)

  def verify_CA(self, certdir, warnHrs):
    """function to check certificate validity - not used"""
    ## Step 1: Check for existence of CAcertfiles directory ... 
    ##   return Unknown as metricsresult when directory does not exist
    if not os.path.isdir(certdir):
      #return or add?
      self.return_unknown("ERROR: CA Certs Directory %s does not exist.. Setting metric to unknown." % certdir)

    # Get all the certificates
    cert_files = rsvprobe.list_directory(certdir, ['0'])
    if not cert_files:
      self.return_unknown("ERROR: CA Certs Directory %s contains no certificate files (*.0).. Setting metric to unknown." % 
                          certdir)     
    error_count = 0
    warn_count = 0
    ok_count = 0

    for local_certs_file in cert_files:
      #Step 2: Get the subject, Hash and dates associated with the certificate
      cmd = "%s x509 -in %s -subject -hash -dates -noout" % shellquote_tuple(CMD_OPENSSL, local_certs_file)
      ec, out = rsvprobe.run_command(cmd)
      values =  out.split('\n')
      subject = values[0].split("subject=")[1].strip()
      chash = values[1].strip()
      start_time = values[2].split("notBefore=")[1]
      end_time = values[3].split("notAfter=")[1]

      # Step 3: Verify certificate using openssl verify command
      cmd = "%s verify -CApath %s %s"  % shellquote_tuple(CMD_OPENSSL, certdir, local_certs_file)
      ec, out = rsvprobe.run_command(cmd)
      verify_ca = out.split(':')[1].strip()
      if not verify_ca == "OK":
        self.add_critical("ERROR: Certificate with subject '%s' and hash '%s' failed to verify." % (subject, chash))
        error_count += 1
        continue

      # Step 4: Check for expiry date on the cerrtificate and compare it with the current date
      # Parsing string of form: Oct  5 08:00:00 2008 GMT ("%b %d %H:%M:%S %Y %Z")
      utc_end_time = time.strptime(end_time, "%b %d %H:%M:%S %Y %Z")
      unix_end_time = calendar.timegm(utc_end_time)
      now = time.time()
      if now >= unix_end_time:
        self.add_critical("ERROR: Certificate with subject '%s' and hash '%s' has expired on %s."  % 
                          (subject, chash, end_time))
        error_count += 1
      elif now + warnHrs*60*60 >= unix_end_time:
        self.add_warning("Certificate with subject '%s' and hash '%s' is about to expire on %s."  % 
                         (subject, chash, end_time))
        warn_count += 1
      else:
        ok_count += 1

    # Step 5: Recording the result for RSV output
    out_msg = "%s certificates found." % (error_count+warn_count+ok_count)
    out_msg += "\t%s failed varification/had expired;" % error_count
    out_msg += "\t%s are about to expire/had warnings;" % warn_count
    out_msg += "\t%s verified OK." % ok_count
    if error_count > 0:
      self.return_critical(out_msg)
    elif warn_count > 0:
      self.return_warning(out_msg)
    else:
      self.return_ok(out_msg)

  def Check_Local_CA(self, certdir, errorHrs):
    "Function to compare CA certificates against the list at GOC"
    source = {}
    found_cas = []
    sha256 = {}
    file_sha256sum = {}
    error_hash = []
    egee_error_hash = []

    # Step 0: Check for existence of CAcertfiles directory ... 
    #   return Unknown as metricsresult when directory does not exist
    if not os.path.isdir(certdir):
      self.return_unknown("ERROR: CA Certs Directory %s does not exist.. Setting metric to unknown." % certdir)

    #Check if the file CA cers are installed from ITB or OSG, new or old format
    local_urls = ["http://repo.opensciencegrid.org/cadist/cacerts_sha256sum-new.txt"]
    ca_format_type = 0
    ca_index = os.path.join(certdir, "INDEX.txt")
    if os.path.isfile(ca_index):
      try: 
        lines = open(ca_index).readlines()
        for i in lines:
          if i.find("IndexTypeVersion") >= 0:
            try:
              ca_format_type = int(i.split()[2])
            except IndexError:
              # When the line with IndexTypeVersion is missing, the type is 0 (default value)
              pass
      except (OSError, ValueError):
        pass
    grid_type = rsvprobe.get_grid_type()
    if not grid_type in [0, 1]:
      self.return_unknown("ERROR: Unknown grid type %s. Setting metric to unknown." % grid_type) 
    #ca_format_type can be only 0,1:
    cert_ext = ".0"
    local_url = local_urls[0]
    if ca_format_type == 1:
      cert_ext = ".pem"
      local_url = local_urls[1]
    elif ca_format_type != 0:
      self.return_unknown("ERROR: CA Certs Directory %s has unknown certificate type %s. Setting metric to unknown." % (certdir, ca_format_type))
    self.add_message("Grid type is %s. CA format type is %s. URL with CA distribution: %s" % (rsvprobe.get_grid_type_string(grid_type), ca_format_type, local_url))
    cert_files = rsvprobe.list_directory(certdir, [cert_ext])
    if not cert_files:
      self.return_unknown("ERROR: CA Certs Directory %s contains no certificate files (*.%s).. Setting metric to unknown." % (certdir, cert_ext))
    # load sha256 in a dictionary basename_without_extension->sha256 (hash for v0, sitename v1)
    for f in cert_files:
      try:
        file_sha256sum[os.path.basename(f).split('.')[0]] = sha256sum(f)
      except IOError:
        self.add_message("Could not calculate sha256sums of your CA file %s. This may result in a probe error. Please verify the file." % f)
        # eliminate error? file may have been deleted in the mean time, just skip?
        pass
    # Download the checksum file from OSG/ITB cache
    lines = rsvprobe.get_http_doc(local_url)
    if not lines:
      self.return_unknown("Could not download the sha256sum for CA list from OSG (%s) or the file is empty. Unable to verify CAs." % local_url)
    for line in lines:
      line.strip()
      values = line.split()
      local_hash = values[1].split('.')[0].strip()
      sha256[local_hash] = values[0]

    # Step 2: Get the list of Certs included in OSG from GOC website.
    #chdir($working_dir);
    local_urls = ["http://repo.opensciencegrid.org/cadist/INDEX.txt",
                  "http://repo.opensciencegrid.org/cadist/INDEX-new.txt"]
    local_url = local_urls[ca_format_type]
    lines = rsvprobe.get_http_doc(local_url)
    if not lines:
      self.return_unknown("Could not download the CA list from OSG (%s) or the list is empty. Unable to verify CAs." % local_url)
    ## Old format (remove 1 #):
    ## Hash         Source                   URL                                      Accreditation
    ##--------------------------------------------------------------------------------------------------------
    #09ff08b7     CNRS2-Projets            http://igc.services.cnrs.fr/GRID-FR/       I
    ## New format (remove 1 #):
    ## OldHash      NewHash      CAfile                   CAURL                                       Version   Accreditation   
    ##--------------------------------------------------------------------------------------------------------
    #75680d2e     ee64a828     AAACertificateServices.pem https://www.terena.org/activities/tcs/         1.41   I

    for line in lines:
      if not line or line.startswith('#'):
        continue
      line_content = line.split()
      chash = line_content[0]
      if ca_format_type == 1:
        # New CA format type we use file names
        chash = line_content[2].split('.')[0]
      source[chash] = line_content[-1]

    # Step 3: Check the CAs to ensure that sha256sums match-up
    status_code = rsvprobe.OK
    missing_count = 0 # Missing IGTF CAs (for egee test only)

    for i in file_sha256sum.keys():
      # List of CAs found.
      found_cas.append(i) 
      if self.test_type.lower() == 'egee' and source[i].find('I') < 0:
        #For EGEE test we want to check only IGTF CAs
        continue
      try:
        if file_sha256sum[i] != sha256[i]:
          # We have detected at least a warning
          status_code = rsvprobe.WARNING
          error_hash.append(i)
      except KeyError:
        pass # Ignore CAs not from OSG.

    # Step 4: Special Case: For EGEE tests we want to notify of errors if any IGTF CAs are missing.
    if self.test_type.lower() == 'egee':
      for i in source.keys():
        if source[i].find('I') < 0:
          continue  # Ignore non IGTF CAs
        if i in found_cas: 
          continue  # CA was present. 
        status_code = rsvprobe.WARNING
        egee_error_hash.append(i)
        missing_count += 1

    # Step 5: See if the warning should be an error
    now = time.time()
    out_msg = "Some of the files in your installations are out of sync with the OSG distribution.\n"
    out_msg += "\tThe CA that are out of sync are: %s \n" % error_hash
    out_msg += "\tPlease ensure that your CA update process (e.g. osg-update-certs or yum update) is configured and running \n"
    if missing_count==0:
        out_msg += "\tNo IGTF CAs are missing.\n"
    else:
        out_msg += "\t%s IGTF CAs are missing and is/are required for sites that need to conform to EGEE policy.\n" % missing_count
    if egee_error_hash:
        out_msg += "\tList of missing CAs include: %s.\n" % egee_error_hash
    else:
        out_msg += "\tNo missing CAs.\n" 

    if status_code == rsvprobe.OK:
      # Remove error file if exists 
      if os.path.isfile(self.error_file):
        try:
          os.remove(self.error_file)
        except OSError:
          self.add_message(
            "Could not delete the error file (%s). Please delete it by hand to avoid potential future problems." % 
            self.error_file)
      self.return_ok("CAs are in sync with OSG distribution\n")
    elif status_code == rsvprobe.WARNING:
      if os.path.isfile(self.error_file):
        lines = None
        try:
          lines = open(self.error_file).readlines()
        except IOError:
          self.add_warning(
            "Could not open error file (%s) indicating CA file is out of sync. This probe may never escalate to an error stage." % 
            self.error_file)
        if not lines:
          self.add_warning("The error file (%s) is empty. This probe may never escalate to an error stage." % self.error_file)
        else:
          last_update = lines[0].strip()
          try:
            if last_update and now > float(last_update) + errorHrs*60*60:
              # Escalate warning to error
              self.return_critical(out_msg)
            else:
              self.return_warning(out_msg)
          except ValueError:
            self.add_warning("The error file (%s) is malformed. This probe may never escalate to an error stage." % self.error_file)
            self.return_warning(out_msg)
      else:
        # Out of sync for the first time. Create error record. Return Warning.
        try:
          open(self.error_file, 'w').write("%s" % now)
        except IOError:
          self.add_warning(
            "Could not record error file (%s) indicating CA file is out of sync. This probe may never escalate to an error stage." % 
            self.error_file)
        self.return_warning(out_msg)

    # Step 6: Recording the result for RSV output
    # already done
    # As it is now it should never end up here
    if status_code > rsvprobe.WARNING:
      self.return_critical("Probe ended with unexpected error condition")
    self.return_unknown("Probe ended with unexpected status")

    # This code is not checking for cert validity or expiration
    # only comparing to the recorded MD5 signatures


##### Main code #####
def main():
  """main: calling probe.run"""
  p = CAcertProbe()
  p.run()

if __name__ == "__main__":
  main()

